/* Generated By:JJTree: Do not edit this line. Literal.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package org.sidif.parser.node;

import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimeZone;

import org.sidif.parser.jjtree.ParseException;
import org.sidif.parser.jjtree.SiDIF;
import org.sidif.parser.jjtree.Token;

public
class Literal extends SimpleNode {

  private Object literal;
  org.sidif.triple.Value<?> literalValue;

  /**
   * @return the literalValue
   */
  public org.sidif.triple.Value<?>  getLiteralValue() {
    return literalValue;
  }

  public Literal(int id) {
    super(id);
  }

  public Literal(SiDIF p, int id) {
    super(p, id);
  }

  /** Accept the visitor. **/
  public Object jjtAccept(SiDIFVisitor visitor,
      org.sidif.triple.impl.ObjectHolder data) {
    return visitor.visit(this, data);
  }

  /**
   * @return the literal
   */
  public Object getLiteral() {
    return literal;
  }

  public void setLiteral(Object literal) {
    this.literal = literal;

  }

  private static final String[] DATE_FORMATS = new String[] { "yyyy-MM-dd'T'",
      "yyyy-MM-dd" };

  private static final String[] TIME_FORMATS = new String[] { "HH:mm:ss.SSSZ",
      "HH:mm:ssZ", "HH:mmZ", "HH:mm:ss.SSS", "HH:mm:ss", "HH:mm" };
  
  /**
   * create a Date from a given Token and SimpleDateFormat
   * 
   * @param token
   * @param f
   * @return the date for the given token and date format
   */
  public Date toDate(Token token, SimpleDateFormat f) {
    f.setTimeZone(TimeZone.getTimeZone("UTC"));
    try {
      return f.parse(token.image);
    } catch (final java.text.ParseException pe) {
      // Ignore. Try the next.
    }
    return null;
  }

  /**
   * 
   * @param token
   * @throws ParseException
   * @return the Value for this token
   */
  public org.sidif.triple.Value<?> toDate(Token token) throws ParseException {
    // first try date/time combinations
    for (final String dateformat : DATE_FORMATS) {
      for (final String timeformat : TIME_FORMATS) {
        final SimpleDateFormat f = new SimpleDateFormat(dateformat + timeformat);
        Date parseDate = toDate(token, f);
        if (parseDate != null) {
          org.sidif.triple.Value<Timestamp> timeStampvalue = org.sidif.triple.Value.getTimeStamp(parseDate.getTime());
          return timeStampvalue;
        }
      }
    }
    // then date formats
    for (final String dateformat : DATE_FORMATS) {
      final SimpleDateFormat f = new SimpleDateFormat(dateformat);
      Date parseDate = toDate(token, f);
      if (parseDate != null) {
        org.sidif.triple.Value<Date> dateValue = org.sidif.triple.Value.getDate(parseDate);
        return dateValue;
      }
    }
    // then time formats
    for (final String timeformat : TIME_FORMATS) {
      final SimpleDateFormat f = new SimpleDateFormat(timeformat);
      Date parseDate = toDate(token, f);
      if (parseDate != null) {
        org.sidif.triple.Value<java.sql.Time> timeValue=org.sidif.triple.Value.getTime(parseDate.getTime());
        return timeValue;
      }
    }
    throw new ParseException("Could not parse the datetime string '"
        + token.image + "' @ line " + token.beginLine + ", column "
        + token.beginColumn);
  }

  /**
   * initialize me from the given type and Token
   * 
   * @param type
   * @param token
   * @throws ParserException
   */
  public void init(String type, Token token) throws ParseException {
    if (type.equals("int")) {
      literalValue=org.sidif.triple.Value.getInteger(token.image); 
    } else if (type.equals("double")) {
      literalValue=org.sidif.triple.Value.getDouble(token.image);
    } else if (type.equals("boolean")) {
      literalValue=org.sidif.triple.Value.getBoolean(token.image);
    } else if (type.equals("char")) {  
      literalValue=org.sidif.triple.Value.getCharacter(token.image.charAt(0));
    } else if (type.equals("Object")) {
      // FIXME - anything else or as true value holder with at type?
      literalValue=null;
    } else if (type.equals("String")) {
      // remove quotes ...
      literalValue=org.sidif.triple.Value.getString(token.image.substring(1, token.image.length() - 1));
    } else if (type.equals("DateTime")) {
      literalValue = toDate(token);
    } else if (type.equals("Time")) {
      // http://stackoverflow.com/questions/2305973/java-util-date-vs-java-sql-date
      literalValue = toDate(token);
    } else if (type.equals("IRI")) {
      try {
        literalValue=org.sidif.triple.Value.getIRI(token.image);
      }
      catch (java.net.URISyntaxException use)
      {
        throw new ParseException(use.getMessage());
      }
    } else {
      throw new ParseException("Unknown type '"+type+"' for literal '"+token.image+"'");
    }
    init(literalValue,token.image);
  }

  /**
   * init this literal for the given literalValue and String representation 
   * 
   * @param literalValue
   * @param literal
   */
  public void init(org.sidif.triple.Value<?> literalValue, String literal) {
    this.literalValue = literalValue;
    this.literal = literal;
  }
}
/* JavaCC - OriginalChecksum=b9fc90adc2b2dae0ac2447e8efe4c789 (do not edit this line) */

/**
 *
 * This file is part of the https://github.com/BITPlan/org.sidif.triplestore open source project
 *
 * Copyright Â© 2015-2017 BITPlan GmbH https://github.com/BITPlan
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 *
 *  You may obtain a copy of the License at
 *
 *  http:www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Generated By:JJTree: Do not edit this line. Literal.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package org.sidif.parser.node;

import org.sidif.parser.jjtree.ParseException;
import org.sidif.parser.jjtree.SiDIF;
import org.sidif.parser.jjtree.Token;

public
class Literal extends SimpleNode {

  private Object literal;
  org.sidif.triple.Value<?> literalValue;

  /**
   * @return the literalValue
   */
  public org.sidif.triple.Value<?>  getLiteralValue() {
    return literalValue;
  }

  public Literal(int id) {
    super(id);
  }

  public Literal(SiDIF p, int id) {
    super(p, id);
  }

  /** Accept the visitor. **/
  public Object jjtAccept(SiDIFVisitor visitor,
      org.sidif.triple.impl.ObjectHolder data) {
    return visitor.visit(this, data);
  }

  /**
   * @return the literal
   */
  public Object getLiteral() {
    return literal;
  }

  public void setLiteral(Object literal) {
    this.literal = literal;

  }

 
  /**
   * convert the given token content to a date
   * @param token
   * @throws ParseException
   * @return the Value for this token
   */
  public org.sidif.triple.Value<?> toDate(Token token) throws ParseException {
    org.sidif.triple.Value<?> result=org.sidif.triple.Value.getDateTime(token.image);
    if (result!=null)
      return result;
    throw new ParseException("Could not parse the datetime string '"
        + token.image + "' @ line " + token.beginLine + ", column "
        + token.beginColumn);
  }

  /**
   * initialize me from the given type and Token
   * 
   * @param type
   * @param token
   * @throws ParserException
   */
  public void init(String type, Token token) throws ParseException {
    if (type.equals("int")) {
      literalValue=org.sidif.triple.Value.getInteger(token.image); 
    } else if (type.equals("double")) {
      literalValue=org.sidif.triple.Value.getDouble(token.image);
    } else if (type.equals("boolean")) {
      literalValue=org.sidif.triple.Value.getBoolean(token.image);
    } else if (type.equals("char")) {  
      literalValue=org.sidif.triple.Value.getCharacter(token.image.charAt(0));
    } else if (type.equals("Object")) {
      // FIXME - anything else or as true value holder with at type?
      literalValue=null;
    } else if (type.equals("String")) {
      // remove quotes ...
      literalValue=org.sidif.triple.Value.getString(token.image.substring(1, token.image.length() - 1));
    } else if (type.equals("DateTime")) {
      literalValue = toDate(token);
    } else if (type.equals("Time")) {
      // http://stackoverflow.com/questions/2305973/java-util-date-vs-java-sql-date
      literalValue = toDate(token);
    } else if (type.equals("IRI")) {  
      literalValue=org.sidif.triple.Value.getIRI(token.image);
    } else {
      throw new ParseException("Unknown type '"+type+"' for literal '"+token.image+"'");
    }
    init(literalValue,token.image);
  }

  /**
   * init this literal for the given literalValue and String representation 
   * 
   * @param literalValue
   * @param literal
   */
  public void init(org.sidif.triple.Value<?> literalValue, String literal) {
    this.literalValue = literalValue;
    this.literal = literal;
  }
}
/* JavaCC - OriginalChecksum=b9fc90adc2b2dae0ac2447e8efe4c789 (do not edit this line) */
